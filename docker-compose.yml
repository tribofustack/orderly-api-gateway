version: '3'

services:
  redis:
    build: ./infra/redis
    container_name: redis-server
    # ports:
    #   - 6379:6379
    networks:
      - orderly-net

  rabbitmq:
    build: ./infra/rabbitmq
    container_name: rabbitmq-server
    environment:
      - RABBITMQ_ERLANG_COOKIE=${AMQP_COOKIE}
      - RABBITMQ_DEFAULT_USER=${AMQP_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${AMQP_PASSWORD}
    env_file: .env
    networks:
      - orderly-net

  postgres:
    build: ./infra/postgres
    container_name: postgres-database
    # ports:
    #   - 5432:5432
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data/postgres
    env_file:
      - ./orderly-api/.env.production
    volumes:
      - postgres:/data/postgres
    networks:
      - orderly-net
    restart: unless-stopped

  kong:
    build: ./infra/kong
    container_name: kong-stateless
    volumes:
      - ./kong/kong-config.yml:/tmp/kong-config.yml
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /tmp/kong-config.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_LOG_LEVEL: debug
      KONG_PLUGINS: bundled
    restart: on-failure
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - orderly-net
    ports:
      # - 8000:8000 # disponivel para uso
      # - 8001:8001 # api do kong
      - 8444:8444
      - 8443:8443

  nginx:
    build: ./infra/nginx
    container_name: nginx-proxy
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - orderly-net
    depends_on:
      - api
      - kong

  api:
    build: ./orderly-api
    container_name: node-api
    # ports:
    #   - 3000:3000
    volumes:
      - ./orderly-api:/usr/api
    networks:
      - orderly-net
    depends_on:
      - redis
      - postgres
    restart: always
    links:
      - postgres
      - redis
    env_file:
      - ./orderly-api/.env.production

  # ms_financial:
  #   build: ./ms-financial
  #   container_name: ms-financial-api
  #   # ports:
  #   #   - 3001:3001
  #   volumes:
  #     - ./ms-financial:/usr/api
  #   networks:
  #     - orderly-net
  #   depends_on:
  #     - redis
  #     - postgres
  #   restart: always
  #   links:
  #     - postgres
  #     - redis
  #   env_file:
  #     - ./ms-financial/.env.production

  ms_checkin:
    build: ./ms-checkin
    container_name: ms-checkin-api
    # ports:
    #   - 3002:3002
    volumes:
      - ./ms-checkin:/usr/api
    networks:
      - orderly-net
    depends_on:
      - redis
      - postgres
    restart: always
    links:
      - postgres
      - redis
    env_file:
      - ./ms-checkin/.env.production

  # ms_checkout:
  #   build: ./ms-checkout
  #   container_name: ms-checkout-api
  #   # ports:
  #   #   - 3003:3003
  #   volumes:
  #     - ./ms-checkout:/usr/api
  #   networks:
  #     - orderly-net
  #   depends_on:
  #     - redis
  #     - postgres
  #   restart: always
  #   links:
  #     - postgres
  #     - redis
  #   env_file:
  #     - ./ms-checkout/.env.production
 
networks:
  orderly-net:
    driver: bridge
    external: false

volumes:
  postgres:
  kong_data: {}