name: Apply

on: [push, workflow_dispatch]

jobs:
  apply:
    runs-on: ubuntu-latest
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.CREDENTIALS }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Auth GCloud
        uses: 'google-github-actions/auth@v2.1.2'
        with:
            credentials_json: ${{ secrets.CREDENTIALS }}
            export_environment_variables: true
            create_credentials_file: true

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Use gcloud CLI
        run: gcloud container clusters list

      - name: Setup Cluster Kubernetes
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: ${{ vars.CLUSTER_NAME }}
          location: ${{ vars.ZONE }}
    
      - name: Setup Namespace
        run: |
            kubectl apply -f namespaces.yaml
            kubectl config set-context --current --namespace=orderly

      - name: apply redis
        working-directory: redis/
        run: kubectl apply -f k8s/

      - name: apply db
        working-directory: postgres/
        run: kubectl apply -f k8s/
      
      - name: apply API Gateway
        working-directory: kong/k8s/
        run: |
          echo "$(cat configmap.yaml)" | envsubst | kubectl apply -f -
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
        env:
          TOKEN_SECRET: ${{ secrets.TOKEN_SECRET }}

      - name: apply reverse-proxy
        working-directory: nginx/k8s
        run: |
          echo "$(cat configmap.yaml)" | envsubst | kubectl apply -f -
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
        env:
          SERVERLESS_FUNCTION_ENDPOINT: ${{ vars.SERVERLESS_FUNCTION_ENDPOINT }}
          GCLOUD_AUTH: gcloud auth print-identity-token

      - name: get services
        run: kubectl get svc -o wide